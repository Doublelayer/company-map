{"version":3,"sources":["map-marker.svg","user-marker.svg","CompanyApi.js","CoordsApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_URL_COMPANIES","window","location","hostname","API_URL_IP_TO_COORDINATES","marker","L","icon","iconUrl","mapMarker","iconSize","popupAnchor","user","userMarker","mapOptions","enableHighAccuracy","timeout","maximumAge","App","props","state","pageIsLoading","apiFetching","modal","latitude","longitude","city","haveUserLoacation","zoom","sectorList","selectedSectorsArray","companies","selectedCity","citys","setUserLocation","bind","success","getCurrentPositionError","toggleInfoModal","sectorSubmit","selectMultipleOption","selectCityOption","asyncSearchCitys","query","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","docs","catch","error","console","warn","code","message","getAllDocumentsBySector","this","sectors","documents","setState","prevState","coords","result","resolvedLocation","forceUpdate","Promise","all","navigator","geolocation","getCurrentPosition","value","cityName","latt","longt","input","length","searchDistinctCityBy","foundCitys","position","readyToQuery","className","active","spinner","text","Map","center","TileLayer","attribution","url","Marker","map","key","_id","Popup","href","homepage","target","name","street","housenumber","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","Card","CardHeader","CardBody","CardText","css","loading","id","options","multiple","includeFilter","onChange","getFilterValue","allSelectedPlaceholder","filterPlaceholder","includeSelectAll","placeholder","selectAllText","numberDisplayed","manySelectedPlaceholder","disabled","Component","Boolean","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e2ecb87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map-marker.0147d86c.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-marker.ea45ba00.svg\";","const API_URL_COMPANIES =\r\n  window.location.hostname === \"localhost\" ? \"http://localhost:5000/api/v1/\" : \"https://api.guestm.app/api/v1/messages\";\r\n\r\nexport function getCompanySectors() {\r\n  return fetch(`${API_URL_COMPANIES}companies/sectors`)\r\n    .then(res => res.json())\r\n    .then(sectors => {\r\n      return sectors;\r\n    })\r\n    .catch(error => console.warn(`ERROR(${error.code}) : ${error.message}`));\r\n}\r\n\r\nexport function getAllDocumentsBySector(query) {\r\n  return fetch(`${API_URL_COMPANIES}companies/findbysectors`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(query)\r\n  })\r\n    .then(res => res.json())\r\n    .then(docs => {\r\n      return docs;\r\n    })\r\n    .catch(error => console.warn(`ERROR(${error.code}) : ${error.message}`));\r\n}\r\n\r\nexport function searchDistinctCityBy(input) {\r\n  return fetch(`${API_URL_COMPANIES}city/searchcity`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({ input: input })\r\n  })\r\n    .then(res => res.json())\r\n    .then(citys => {\r\n      return citys;\r\n    })\r\n    .catch(error => console.warn(`ERROR(${error.code}) : ${error.message}`));\r\n}\r\n","const API_URL_IP_TO_COORDINATES = \"https://ipapi.co/json/\";\r\n\r\nexport function getCityNameByLatitudeAndLongitude(coords) {\r\n  return fetch(`https://www.geocode.xyz/${coords.latitude},${coords.longitude}?json=1`)\r\n    .then(res => res.json())\r\n    .then(result => {\r\n      return {\r\n        latitude: coords.latitude,\r\n        longitude: coords.longitude,\r\n        city: result.city\r\n      };\r\n    })\r\n    .catch(error => console.warn(`ERROR(${error.code}) : ${error.message}`));\r\n}\r\n\r\nexport function getCoordinatesByCityName(cityName) {\r\n  return fetch(`https://www.geocode.xyz/${cityName}+de?json=1`)\r\n    .then(res => res.json())\r\n    .then(coords => {\r\n      return {\r\n        latitude: coords.latt,\r\n        longitude: coords.longt,\r\n        city: cityName\r\n      };\r\n    })\r\n    .catch(error => console.warn(`ERROR(${error.code}) : ${error.message}`));\r\n}\r\n\r\nexport function getCoordinatesFromIpAdress() {\r\n  return fetch(API_URL_IP_TO_COORDINATES)\r\n    .then(res => res.json())\r\n    .then(location => {\r\n      return location;\r\n    })\r\n    .catch(error => console.warn(`ERROR(${error.code}) : ${error.message}`));\r\n}\r\n","import React, { Component } from \"react\";\n\nimport \"react-picky/dist/picky.css\";\n\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport Picky from \"react-picky\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Card, CardHeader, CardBody, CardText } from \"reactstrap\";\n\nimport mapMarker from \"./map-marker.svg\";\nimport userMarker from \"./user-marker.svg\";\n\nimport { getCompanySectors, getAllDocumentsBySector, searchDistinctCityBy } from \"./CompanyApi\";\nimport { getCityNameByLatitudeAndLongitude, getCoordinatesByCityName, getCoordinatesFromIpAdress } from \"./CoordsApi\";\n\nimport \"./App.css\";\n\nconst marker = L.icon({\n  iconUrl: mapMarker,\n  iconSize: [50, 82],\n  popupAnchor: [0, -20]\n});\n\nconst user = L.icon({\n  iconUrl: userMarker,\n  iconSize: [50, 82],\n  popupAnchor: [0, -20]\n});\n\nconst mapOptions = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.setUserLocation = this.setUserLocation.bind(this);\n    this.success = this.success.bind(this);\n    this.getCurrentPositionError = this.getCurrentPositionError.bind(this);\n    this.toggleInfoModal = this.toggleInfoModal.bind(this);\n    this.sectorSubmit = this.sectorSubmit.bind(this);\n    this.selectMultipleOption = this.selectMultipleOption.bind(this);\n    this.selectCityOption = this.selectCityOption.bind(this);\n    this.asyncSearchCitys = this.asyncSearchCitys.bind(this);\n  }\n\n  state = {\n    pageIsLoading: true,\n    apiFetching: false,\n    modal: false,\n    location: {\n      latitude: 0,\n      longitude: 0\n    },\n    city: null,\n    haveUserLoacation: false,\n    zoom: 2,\n    sectorList: [],\n    selectedSectorsArray: [],\n    companies: [],\n    selectedCity: [],\n    citys: []\n  };\n\n  sectorSubmit() {\n    const query = {\n      city: this.state.city,\n      sectors: this.state.selectedSectorsArray\n    };\n\n    getAllDocumentsBySector(query).then(documents => {\n      this.setState({\n        companies: documents,\n        apiFetching: false\n      });\n    });\n  }\n\n  toggleInfoModal() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  setUserLocation(location) {\n    this.setState({\n      location: {\n        latitude: location.latitude,\n        longitude: location.longitude\n      },\n      city: location.city,\n      selectedCity: location.city,\n      haveUserLoacation: true,\n      zoom: 14\n    });\n  }\n\n  success(location) {\n    getCityNameByLatitudeAndLongitude(location.coords).then(resolvedLocation => {\n      this.setUserLocation(resolvedLocation);\n      this.setState({});\n    });\n  }\n\n  getCurrentPositionError() {\n    getCoordinatesFromIpAdress().then(location => {\n      this.setUserLocation(location);\n      this.setState({\n        modal: true\n      });\n      this.forceUpdate();\n    });\n  }\n\n  async componentDidMount() {\n    await Promise.all([\n      navigator.geolocation.getCurrentPosition(this.success, this.getCurrentPositionError, mapOptions),\n      getCompanySectors().then(sectors => {\n        this.setState({\n          sectorList: sectors\n        });\n      })\n    ]).then(() => {\n      this.setState({\n        pageIsLoading: false\n      });\n    });\n  }\n\n  selectMultipleOption(value) {\n    this.setState({ selectedSectorsArray: value });\n  }\n\n  selectCityOption(value) {\n    this.setState({ selectedCity: value, pageIsLoading: true });\n\n    getCoordinatesByCityName(value)\n      .then(location => {\n        this.setUserLocation(location);\n        this.sectorSubmit();\n      })\n      .then(() => {\n        this.setState({\n          pageIsLoading: false\n        });\n      });\n  }\n\n  asyncSearchCitys(input) {\n    if (input.length >= 2) {\n      searchDistinctCityBy(input).then(foundCitys => {\n        this.setState({\n          citys: foundCitys\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      sectorList,\n      selectedSectorsArray,\n      companies,\n      modal,\n      haveUserLoacation,\n      zoom,\n      pageIsLoading,\n      apiFetching,\n      selectedCity,\n      citys\n    } = this.state;\n    const position = [this.state.location.latitude, this.state.location.longitude];\n    const readyToQuery = selectedSectorsArray.length > 0;\n\n    return (\n      <div>\n        <LoadingOverlay className=\"map-container\" active={pageIsLoading} spinner text=\"Einen Augenblick bitte . . . \">\n          <Map className=\"map\" center={position} zoom={zoom}>\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {haveUserLoacation ? <Marker position={position} icon={user}></Marker> : \"\"}\n            {companies.map(companies => (\n              <Marker key={companies._id} position={[companies.latitude, companies.longitude]} icon={marker}>\n                <Popup>\n                  <a href={companies.homepage} target=\"_blank\">\n                    {companies.name}\n                  </a>\n                  <br />\n                  {companies.street} {companies.housenumber}\n                </Popup>\n              </Marker>\n            ))}\n          </Map>\n          <Modal isOpen={modal} toggleInfoModal={this.toggleInfoModal}>\n            <ModalHeader toggleInfoModal={this.toggleInfoModal}>Hinweis zur Standortermittlung</ModalHeader>\n            <ModalBody>Du hast die Standortermittlung nicht erlaubt. Dein Standort wurde anhand deiner IP-Adresse ermittelt!</ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={this.toggleInfoModal}>\n                Okay\n              </Button>\n            </ModalFooter>\n          </Modal>\n          {!pageIsLoading ? (\n            <Card body className=\"search-form\">\n              <CardHeader>Auswahl der Firmenbranche</CardHeader>\n              <CardBody>\n                <CardText>Suche nach einer anderen Stadt.</CardText>\n                {!apiFetching ? (\n                  <div>\n                    <Picky\n                      id=\"picky-city\"\n                      value={selectedCity}\n                      options={citys}\n                      multiple={false}\n                      includeFilter={true}\n                      onChange={this.selectCityOption}\n                      getFilterValue={this.asyncSearchCitys}\n                      allSelectedPlaceholder={\"Alle ausgewählt\"}\n                      filterPlaceholder={\"z.B.: Berlin\"}\n                    />\n                    <CardText>Bitte wähle deine gesuchte Branche aus.</CardText>\n                    <Picky\n                      id=\"picky-sector\"\n                      value={selectedSectorsArray}\n                      options={sectorList}\n                      multiple={true}\n                      includeSelectAll={true}\n                      includeFilter={true}\n                      onChange={this.selectMultipleOption}\n                      placeholder=\"Branche\"\n                      selectAllText=\"Alle auswählen\"\n                      numberDisplayed={0}\n                      manySelectedPlaceholder={\"%s ausgewählt\"}\n                      allSelectedPlaceholder={\"Alle ausgewählt\"}\n                    />\n                    <Button className=\"btn-form\" onClick={this.sectorSubmit} disabled={!readyToQuery}>\n                      Suchen\n                    </Button>\n                  </div>\n                ) : (\n                  <BeatLoader css={\"text-align:center; padding-top:20px\"} color={\"#0066a6\"} loading={true} />\n                )}\n              </CardBody>\n            </Card>\n          ) : (\n            \"\"\n          )}\n        </LoadingOverlay>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}